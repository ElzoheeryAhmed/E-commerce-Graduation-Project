using System.Linq.Expressions;
using System.Reflection;

namespace GraduationProject.Repository.Extensions
{
    public static class QueryableExtensions {
        public static IQueryable<string> SelectFromString<T>(this IQueryable<T> query, string column) {
            var parameter = Expression.Parameter(typeof(T), "e");
            var property = MakePropPath(parameter, column);
            
            if (property.Type != typeof(string)) {
                if (property.Type != typeof(object))
                    property = Expression.Convert(property, typeof(object));
                
                property = Expression.Call(_toStringMethod, property);
            }
            
            var lambda = Expression.Lambda<Func<T, string>>(property, parameter);
            
            return query.Select(lambda);
        }

        private static Expression MakePropPath(Expression objExpression, string path) {
            return path.Split('.').Aggregate(objExpression, Expression.PropertyOrField);
        }

        private static MethodInfo _toStringMethod = typeof(Convert).GetMethods().Single(m =>
                m.Name == nameof(Convert.ToString) && m.GetParameters().Length == 1 &&
                m.GetParameters()[0].ParameterType == typeof(object)
            );
    }
}